import mongoose, { Schema, Document, Model, Types } from "mongoose";

export type ElectionStatus = "open" | "closed";

export interface ICandidate {
  _id: Types.ObjectId; // autogenerated by Mongoose for subdocuments
  name: string;
}

export interface IElection extends Document {
  title: string;
  candidates: ICandidate[];
  status: ElectionStatus; // open -> closed (no more voting)
  published: boolean; // when true, results are visible to permitted users
  createdBy: Types.ObjectId; // manager/admin who created the election
  endAt?: Date; // optional time-based closing
  createdAt: Date;
  updatedAt: Date;
}

const candidateSchema = new Schema<ICandidate>({
  name: { type: String, required: true, trim: true },
});

const electionSchema = new Schema<IElection>(
  {
    title: { type: String, required: true, trim: true },
    candidates: { type: [candidateSchema], validate: [(v: ICandidate[]) => v && v.length > 0, "At least one candidate required"] },
    status: { type: String, enum: ["open", "closed"], default: "open", index: true },
    published: { type: Boolean, default: false, index: true },
    createdBy: { type: Schema.Types.ObjectId, ref: "User", required: true, index: true },
    endAt: { type: Date },
  },
  { timestamps: true }
);

export const Election: Model<IElection> = mongoose.models.Election || mongoose.model<IElection>("Election", electionSchema);